---

#------------------------------------------------------------------------------
# Panel Config

cellIdPreamble: "cell-"
cells:
  encoder1:
    dataRef: "encoder1_health"
    label:
      separator: "cr"
      units: "none"
      decimalPoints: 0
    labelColor:
      gradientMode: "hue"
      thresholds:
        - {color: "rgba(0,255,0,0.1)", level: 0}
        - {color: "yellow", level: 1}
        - {color: "red", level: 2}
    link:
      url: "https://erikaalvarez.grafana.net/d/video-streaming-dashboard/video-streaming-dashboard?orgId=1&viewPanel=2&from=now-6h&to=now&timezone=browser&var-server="
      params: "none"          # we already set from/to in the URL; don't append more
      sameTab: false           # v1.14.0+ opens in same tab unless Ctrl/Shift is held
  encoder2:
    dataRef: "encoder2_health"
    label:
      separator: "cr"
      units: "none"
      decimalPoints: 0
    labelColor:
      gradientMode: "hue"
      thresholds:
        - {color: "green", level: 0}
        - {color: "yellow", level: 1}
        - {color: "red", level: 2}
  encoder3:
    dataRef: "encoder3_health"
    label:
      separator: "cr"
      units: "none"
      decimalPoints: 0
    labelColor:
      gradientMode: "hue"
      thresholds:
        - {color: "green", level: 0}
        - {color: "yellow", level: 1}
        - {color: "red", level: 2}
  encoder4:
    dataRef: "encoder4_health"
    label:
      separator: "cr"
      units: "none"
      decimalPoints: 0
    labelColor:
      gradientMode: "hue"
      thresholds:
        - {color: "green", level: 0}
        - {color: "yellow", level: 1}
        - {color: "red", level: 2}
  encoder5:
    dataRef: "encoder5_health"
    label:
      separator: "cr"
      units: "none"
      decimalPoints: 0
    labelColor:
      gradientMode: "hue"
      thresholds:
        - {color: "green", level: 0}
        - {color: "yellow", level: 1}
        - {color: "red", level: 2}
  encoder6:
    dataRef: "encoder6_health"
    label:
      separator: "cr"
      units: "none"
      decimalPoints: 0
    labelColor:
      gradientMode: "hue"
      thresholds:
        - {color: "green", level: 0}
        - {color: "yellow", level: 1}
        - {color: "red", level: 2}
  mux1:
    dataRef: "mux1_health"
    label:
      separator: "cr"
      units: "none"
      decimalPoints: 0
    labelColor:
      gradientMode: "hue"
      thresholds:
        - {color: "green", level: 0}
        - {color: "yellow", level: 1}
        - {color: "red", level: 2}
  mux2:
    dataRef: "mux2_health"
    label:
      separator: "cr"
      units: "none"
      decimalPoints: 0
    labelColor:
      gradientMode: "hue"
      thresholds:
        - {color: "green", level: 0}
        - {color: "yellow", level: 1}
        - {color: "red", level: 2}
  decoder1:
    dataRef: "decoder1_health"
    label:
      separator: "cr"
      units: "none"
      decimalPoints: 0
    labelColor:
      gradientMode: "hue"
      thresholds:
        - {color: "green", level: 0}
        - {color: "yellow", level: 1}
        - {color: "red", level: 2}
  decoder2:
    dataRef: "decoder2_health"
    label:
      separator: "cr"
      units: "none"
      decimalPoints: 0
    labelColor:
      gradientMode: "hue"
      thresholds:
        - {color: "green", level: 0}
        - {color: "yellow", level: 1}
        - {color: "red", level: 2}
  decoder3:
    dataRef: "decoder3_health"
    label:
      separator: "cr"
      units: "none"
      decimalPoints: 0
    labelColor:
      gradientMode: "hue"
      thresholds:
        - {color: "green", level: 0}
        - {color: "yellow", level: 1}
        - {color: "red", level: 2}
  rangeRing:
    bespokeDataRef: "ringBoundary"
    label:
      separator: "replace"
      units: "ops"
    labelColor:
      thresholds: 
        - {color: "green", level: 0}
        - {color: "yellow", level: 40}
        - {color: "red", level: 80}
    bespoke:
      dataRefs:
        - "test-data-large-sin"
      formulas:
        - "scale = string(0.5 + max(0.0, min(1.0, data['test-data-large-sin'] / 1000)))"
        - "ringBoundary = round(data['test-data-large-sin'] / 200) * 200"
        #- "utils.log('log scale and data to console:', scale, ringBoundary, data)"
      drives:
        # Capture the range-ring origin on the 'ellipse' element
        - elementName: "ellipse"
          attribsGet:
            rangeRingOriginX: "cx"
            rangeRingOriginY: "cy"

        # Scale the range-ring on the outer 'g' around the ellipse origin. Scaling on the outer 'g' ensures
        # everything within such as the label is kept coherently positioned.
        - elementName: "g"
          elementPosition: 1
          attribsSet:
            transform: "concat('scale(', scale, ' ', scale, ')')"
            'transform-origin': "concat(rangeRingOriginX, ' ', rangeRingOriginY)"
  temperature:
    dataRef: "temperature"
    label:
      separator: "cr"
      units: "none"
      decimalPoints: 0
    fillColor:
      gradientMode: "hue"
      thresholds:
        - {color: "green", level: 0}
        - {color: "yellow", level: 40}
        - {color: "red", level: 80}
  power:
    dataRef: "power"
    label:
      separator: "cr"
      units: "none"
      decimalPoints: 0
    fillColor:
      gradientMode: "hue"
      thresholds:
        - {color: "green", level: 0}
        - {color: "yellow", level: 40}
        - {color: "red", level: 80}
  cpu:
    dataRef: "cpu"
    label:
      separator: "cr"
      units: "none"
      decimalPoints: 0
    fillColor:
      gradientMode: "hue"
      thresholds:
        - {color: "green", level: 0}
        - {color: "yellow", level: 40}
        - {color: "red", level: 80}
  bitrate:
    dataRef: "bitrate"
    label:
      separator: "cr"
      units: "none"
      decimalPoints: 0
    fillColor:
      gradientMode: "hue"
      thresholds:
        - {color: "green", level: 0}
        - {color: "yellow", level: 40}
        - {color: "red", level: 80}
  health_multicast:
    dataRef: "health_multicast"
    label:
      separator: "cr"
      units: "none"
      decimalPoints: 0
    fillColor:
      gradientMode: "hue"
      thresholds:
        - {color: "green", level: 0}
        - {color: "yellow", level: 1}
        - {color: "red", level: 2}
  disaster:
    dataRef: "disaster"
    label:
      separator: "cr"
      units: "none"
      decimalPoints: 0
    fillColor:
      gradientMode: "hue"
      thresholds:
        - {color: "green", level: 0}
        - {color: "red", level: 1}    
  high:
    dataRef: "high"
    label:
      separator: "cr"
      units: "none"
      decimalPoints: 0
    fillColor:
      gradientMode: "hue"
      thresholds:
        - {color: "green", level: 0}
        - {color: "red", level: 2}  
  warning:
    dataRef: "warning"
    label:
      separator: "cr"
      units: "none"
      decimalPoints: 0
    fillColor:
      gradientMode: "hue"
      thresholds:
        - {color: "green", level: 0}
        - {color: "yellow", level: 5}
        - {color: "red", level: 10}
  info:
    dataRef: "info"
    label:
      separator: "cr"
      units: "none"
      decimalPoints: 0
    fillColor:
      gradientMode: "hue"
      thresholds:
        - {color: "green", level: 0}
